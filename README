CS4760 Assignment 6 — Memory Management with LRU
Author: Jerome Ramey Jr
Date: May 2025

Table of Contents
1. Overview
2. Features
3. Requirements
4. Build and Installation
5. Usage
6. Command-Line Options
7. Logging and Output
8. Memory Layout Display
9. Data Structures
10. Page Replacement Policy
11. Inter-Process Communication (IPC)
12. Statistics and Metrics
13. Termination Criteria
14. Resource Cleanup
15. File Overview
16. License

Overview
This project implements an Operating System Simulator (oss) that manages memory requests from forked user processes via message queues, using a Least Recently Used (LRU) page replacement algorithm with dirty-bit optimization. It simulates paging, page faults, disk I/O delays, and logs all activity to both the console and a logfile.

Features
• LRU page replacement with timestamps from a simulated clock (seconds and nanoseconds)
• Dirty-bit optimization: clean vs. dirty swaps incur 10 ms vs. 14 ms simulated disk delay
• Fixed memory space: 128 KB total, 1 KB pages → 32 pages per process, 256 frames total
• Configurable concurrency: up to 18 simultaneous user processes
• FIFO process scheduling with page-fault blocking
• Disk I/O queue with single-threaded page fault servicing
• Periodic memory dumps each simulated second
• Console and file logging of all memory-related events

Requirements
• UNIX-like OS (Linux or macOS)
• GCC or compatible C compiler
• POSIX IPC (shared memory and message queues)
• make, bash

Build and Installation
From the project root directory (username.6/):
make            Builds oss and user_proc
make clean      Removes compiled files

Usage
./oss -n <total_procs> -s <max_simultaneous> -i <interval_ms> -f 

Spawns up to <total_procs> user processes (max 100)
Allows a maximum of <max_simultaneous> concurrent processes (max 18)
Waits <interval_ms> milliseconds between fork attempts
Logs all oss activity to the specified  and stdout

Example:
./oss -n 20 -s 5 -i 100 -f logfile.txt

Command-Line Options
Flag   Argument           Default     Description
-h     —                  —           Display help and usage information
-n     <#processes>       —           Number of total user processes to launch (≤ 100)
-s     <#simultaneous>    —           Max concurrent child processes (≤ 18)
-i                    100         Millisecond interval between launches
-f               —           Required path to output log file

Logging and Output
Every event is logged in the format:
oss:    at time :

Examples:
oss: P2 read hit page 13 in frame 1 at 0:34000000
oss: Page fault P2 page 3 queued for frame 5 at 1:100
oss: Completed swap for P2 page 3 into frame 5 at 1:14000100
oss: P2 terminating at 3:50000000, runtime 2:40

All oss logs are written to both stdout and the logfile. user_proc logs (if present) appear on stdout only.

Memory Layout Display
Printed once per simulated second:

Current memory layout at time ::

Frame   Occ   Dirty   PID   Page   LastRef
0       No    0       —     —      0:0
1       Yes   1       P3    4      1:52000000

P0 page table: [ -1 -1 5 12 7 … ]
P1 page table: [ 2 3 -1 -1 15 … ]

Occ     Indicates if frame is occupied
Dirty   1 if written, 0 if clean
LastRef Timestamp of last memory reference

Data Structures
frame_t:
Fields include occupied, dirty, pid, page_number, last_ref_sec, last_ref_ns

pcb_t:
Fields include occupied, pid, start_sec, start_ns
Each process has a page_table[32] for virtual to physical mapping

Page Replacement Policy
LRU: Frame with the oldest last_ref timestamp is evicted
Dirty-bit optimization:
Clean page swap = 10 ms simulated delay
Dirty page swap = 14 ms simulated delay

Inter-Process Communication (IPC)
Shared memory for simulated system clock (sec and nsec)
Message queues for communication:
User to oss: pid, address, operation
oss to user: pid, frame number, operation
Processes block until faults are serviced

Statistics and Metrics
• Memory accesses per second
• Page fault ratio (faults per access)
• Effective access time per process (including simulated delays)

Termination Criteria
• Stops spawning after -n limit or 5 real seconds
• Terminates when no active children and disk queue is empty
• Handles cleanup on SIGINT or SIGALRM

Resource Cleanup
On shutdown, oss:
• Detaches and deletes shared memory
• Removes message queue
• Frees allocated disk queue memory
• Closes logfile

File Overview
File              Purpose
oss.c             Master simulator logic
user_proc.c       Simulated user process behavior
ipc.h             Message queue structure definitions
oss.h             Shared constants and structure declarations
clock.c / .h      Simulated system clock handling
frame_table.c / .h  Frame management and LRU logic
page_table.c / .h   Page table and mapping operations
utils.c / .h      Logging, random delays, printing utilities
Makefile          Build automation
README.md         Project documentation
